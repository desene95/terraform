# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# pool:
#   name: Default
#   vmImage: ubuntu-latest

# steps:
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact: drop'
#   inputs:
#     PathtoPublish: '$(build.artifactstagingdirectory)'
# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'Pay-As-You-Go(2)(d1ac2c8c-6294-46bc-ae8c-4188669ccbbc)'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: 'az login --service-principal -u $(az_username) -p $(az_password) --tenant $(az_tenant)'
# - task: installTerragrunt@0
#   inputs:
#     terragruntversion: '0.39.2'

stages:
- stage: Plan
  displayName: 'Terragrunt plan'
  jobs:
  - job: plan
    pool:
      name: Default
      vmImage: ubuntu-latest
    steps:
    - task: Bash@3
      displayName: "TGP"
      inputs:
        targetType: 'inline'
        script: |
            # Write your commands here
            echo "this is my working directory: ${PWD}"
            cd /Users/damianesene/terraform
            source setup_env.sh

            #change to hcl location
            cd $(hcl_location)
     
            #run terragrunt plan
            terragrunt plan

# - task: Bash@3
#   displayName: 'Terragrunt plan'
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here
#       echo "this is my working directory: ${PWD}"
#       cd /Users/damianesene/terraform
#       source setup_env.sh

#       #change to hcl location
#       cd $(hcl_location)
     
#       #run terragrunt plan
#       terragrunt plan
#     #workingDirectory: '/virtual_machine'

# - task: Bash@3
#   displayName: 'Terragrunt Apply'
#   inputs:
#     targetType: 'inline'
#     script: |

#       cd /Users/damianesene/terraform
#       source setup_env.sh

#       #change to hcl location
#       cd $(hcl_location)
    
#       #terragrunt apply
#       terragrunt apply